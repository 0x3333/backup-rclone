#!/usr/bin/env python3

# Ignore long lines
# pylama:ignore=E501

import argparse
import configparser
import logging
import os
import subprocess
import sys
import time
from concurrent.futures import ThreadPoolExecutor
from queue import Empty, Queue
from typing import List, Tuple

#
# Constants
#

# Default Files
_CFG_FILE = "/etc/backup-rclone.conf"
_LOG_FILE = "/var/log/backup-rclone.log"

# Exit codes
_EXIT_OK = 0
_EXIT_MISSING_RCLONE = 1
_EXIT_MIN_VERSION = 2
_EXIT_NO_CONFIG = 3
_EXIT_INVALID_CONFIG = 4
_EXIT_NO_PROFILES = 5
_EXIT_PROFILE_NOT_FOUND = 6
_EXIT_FINISHED_WITH_ERRORS = 255

# Configuration
CFG_ACTION_SYNC = "sync"
CFG_ACTION_COPY = "copy"

# rclone
RCLONE_MIN_VERSION = "1.47"
RCLONE_EXECUTABLE = "rclone"
RCLONE_DEFAULT_FILTER = "+ /**"
RCLONE_ARG_VERSION = "--version"
RCLONE_ARG_LISTREMOTES = ["listremotes", "--long"]
RCLONE_ARG_FAST_LIST = "--fast-list"
RCLONE_ARG_FILTER = "--filter"
RCLONE_REMOTES_FAST_LIST = ["s3",
                            "b2",
                            "google cloud storage",
                            "drive",
                            "hubic",
                            "jottacloud",
                            "azureblob",
                            "swift",
                            "qingstor"]

#
# Logging
#


def setup_logging(log_file: str, verbosity: int):
    """Setup the logging infrastructure.

    Parameters
    ----------
    log_file: str
        File to log all entries.
    verbosity: int
        Number from 0 to 3, which 0 shows only errors, and 3 show all messages including rclone output.
    """

    class StdOutFilter(logging.Filter):
        def filter(self, rec) -> bool:
            return rec.levelno < logging.WARNING

    verbosity = max(0, min(verbosity, 3))

    # Set the log level based on the verbosity
    log_level = max(10, 40 - (verbosity * 10))

    formatter = logging.Formatter("[ %(levelname)s ] %(message)s")
    formatterFile = logging.Formatter(
        "%(asctime)s [ %(levelname)s ] [ %(pathname)s:%(lineno)d ] %(message)s")

    handlerFile = logging.FileHandler(log_file)
    handlerFile.setFormatter(formatterFile)
    handlerFile.setLevel(log_level)

    handlerOut = logging.StreamHandler(sys.stdout)
    handlerOut.setFormatter(formatter)
    handlerOut.setLevel(log_level)
    handlerOut.addFilter(StdOutFilter())

    handlerErr = logging.StreamHandler(sys.stderr)
    handlerErr.setFormatter(formatter)
    handlerErr.setLevel(logging.WARNING)

    logging.basicConfig(level=log_level, handlers=[
                        handlerFile, handlerOut, handlerErr])


def enqueue_process_output(file, queue):
    for line in iter(file.readline, ''):
        queue.put(line)
    file.close()


def read_process_pipes(p):
    with ThreadPoolExecutor(2) as pool:
        q_stdout, q_stderr = Queue(), Queue()

        pool.submit(enqueue_process_output, p.stdout, q_stdout)
        pool.submit(enqueue_process_output, p.stderr, q_stderr)

        while p.poll() is None or not q_stdout.empty() or not q_stderr.empty():
            out_line = err_line = ''
            try:
                out_line = q_stdout.get_nowait()
            except Empty:
                pass
            try:
                err_line = q_stderr.get_nowait()
            except Empty:
                pass

            time.sleep(0.2)

            yield (out_line, err_line)

#
# Configuration File
#


class Entry:
    def __init__(self, name: str, entry: configparser.SectionProxy):
        self.name = name
        self.action = entry.get("action", None)
        self.source = entry.get("source", None)
        self.source_path = entry.get("source_path", None)
        self.destination = entry.get("destination", None)
        self.destination_path = entry.get("destination_path", None)
        self.disable_fast_list = entry.getboolean("disable_fast_list", False)
        extra_options = entry.get("extra_options", None)
        self.extra_options = extra_options.split(" ") if extra_options else []
        self.filter = entry.get("filter", RCLONE_DEFAULT_FILTER)
        self.pre_exec = entry.get("pre_exec", None)
        self.post_exec = entry.get("post_exec", None)

        # Validate Config
        if not self.action:
            raise Exception(
                "Entry '%s' has no 'action' value." % self.name)
        if self.action not in [CFG_ACTION_SYNC, CFG_ACTION_COPY]:
            raise Exception(
                "Entry '%s' has a invalid 'action' value('%s')." % (self.name, self.action))

        # Source validation
        if not self.source_path:
            raise Exception(
                "Entry '%s' is missing 'source_path'." % self.name)
        elif (not self.source_path.startswith("/")) or self.source_path.startswith("./") or \
            (not self.source and not os.path.exists(self.source_path)):
            raise Exception(
                "Entry '%s' has a 'source_path' is invalid or it doesn't exists locally." % self.name)

        # Destination validation
        if not self.destination_path:
            raise Exception(
                "Entry '%s' is missing 'destination_path'." % self.name)
        elif (not self.destination_path.startswith("/")) or self.destination_path.startswith("./") or \
            (not self.destination and not os.path.exists(self.destination_path)):
            raise Exception(
                "Entry '%s' has a 'destination_path' is invalid or it doesn't exists locally." % self.name)

        if self.filter:
            for line in self.filter.splitlines():
                if not line.startswith("+") and not line.startswith("-"):
                    raise Exception(
                        "Entry '%s' has a invalid 'filter' value." % self.name)

    def __repr__(self):
        return "<Entry name=%s, action=%s, source=%s, source_path=%s, destination=%s, destination_path=%s, " \
            "disable_fast_list=%s, extra_options=%s, filter=%s>" % (self.name, self.action, self.source, self.source_path, \
                self.destination, self.destination_path, self.disable_fast_list, self.extra_options, self.filter)

#
# Backup Logic
#


def requires_fast_list(entry: Entry) -> bool:
    exit_code, stdout, _ = run_command(
        [RCLONE_EXECUTABLE, *RCLONE_ARG_LISTREMOTES])
    if exit_code == 0:
        for line in stdout.splitlines():
            tokens = [x.strip() for x in line.split(":")]
            if entry.destination == tokens[0] or entry.source == tokens[0]:
                return tokens[1] in RCLONE_REMOTES_FAST_LIST
    return False


def run(profiles: List) -> int:
    if len(config_entries) == 0:
        logging.error("No profiles specified on the configuration file!")
        return _EXIT_NO_PROFILES

    # Check if all provided profiles exists, if provided
    if len(profiles) > 0:
        for profile in profiles:
            found = False
            for entry in config_entries:
                if profile == entry.name:
                    found = True
            if not found:
                logging.error("Profile '%s' not found!" % profile)
                return _EXIT_PROFILE_NOT_FOUND
    else:
        profiles = [entry.name for entry in config_entries]

    exit_code = _EXIT_OK
    for profile in profiles:
        for entry in config_entries:
            if profile == entry.name or not profile:
                # pre_exec execution
                if entry.pre_exec:
                    _exit_code, _, _ = run_command(entry.pre_exec)
                    if _exit_code != 0:
                        logging.error(
                            "Profile %s pre_exec returned %s." % (entry.name, _exit_code))
                        exit_code = _EXIT_FINISHED_WITH_ERRORS
                        break  # Go to the next profile, if any

                logging.info("Running profile %s" % entry.name)

                args = [RCLONE_EXECUTABLE, entry.action, *entry.extra_options]
                for fltr in entry.filter.splitlines():
                    args.append(RCLONE_ARG_FILTER)
                    args.append(fltr)

                # Check if the remote support Fast List
                if not entry.disable_fast_list and requires_fast_list(entry):
                    args.append(RCLONE_ARG_FAST_LIST)
                # Set Source
                if entry.source:
                    args.append("%s:%s" % (entry.source, entry.source_path))
                else:
                    args.append(entry.source_path)
                # Set Destination
                if entry.destination:
                    args.append("%s:%s" %
                                (entry.destination, entry.destination_path))
                else:
                    args.append(entry.destination_path)

                _exit_code, _, _ = run_command(args)
                if _exit_code != 0:
                    exit_code = _EXIT_FINISHED_WITH_ERRORS

                logging.info("Profile %s finished with exit code: %s" % (entry.name, _exit_code))

                # post_exec execution
                if entry.post_exec:
                    _exit_code, _, _ = run_command(entry.post_exec)
                    if _exit_code != 0:
                        logging.error(
                            "Profile %s post_exec returned %s." % (entry.name, _exit_code))
                        exit_code = _EXIT_FINISHED_WITH_ERRORS
                        break  # Go to the next profile, if any

                break  # Go to the next profile, if any

    return exit_code

#
# Helper
#


def run_command(cmd) -> Tuple[int, str, str]:
    """Run a command and return the exit code, stdout and stderr.

    Parameters
    ----------
    cmd: list[str] or str
        Command to be run. A list with the command, and its arguments or a string with command and its arguments.
    """
    shell = not isinstance(cmd, list)
    if not shell:
        logging.debug("%s", " ".join(
            ["'%s'" % x if " " in x else x for x in cmd]))
    else:
        logging.debug(cmd)

    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE,
                            universal_newlines=True, shell=shell)

    stdout = ""
    stderr = ""
    for stdout_line, stderr_line in read_process_pipes(proc):
        if stdout_line:
            logging.debug(
                "stdout: %s" % stdout_line.rstrip(os.linesep))
            stdout += stdout_line
        if stderr_line:
            logging.error(
                "stderr: %s" % stderr_line.rstrip(os.linesep))
            stderr += stderr_line

    proc.wait()

    proc.stdout.close()
    proc.stderr.close()
    return proc.returncode, stdout, stderr

#
# Entry Point
#


config_entries = []


def main():

    #
    # Arguments
    parser = argparse.ArgumentParser(
        description="Create Rclone backups", formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument("-v", "--verbose", dest="verbosity", action="count", default=0,
                        help="Verbose, can be issued multiple times to increase verbosity(Max 3 times)")

    parser.add_argument("-c", "--config-file", default=_CFG_FILE,
                        help="Configuration file")

    parser.add_argument("-l", "--log-file", help="Log file", default=_LOG_FILE)

    parser.add_argument("-s", "--show-profiles", dest="show", action="store_true",
                        help="Show profiles defined in the config file.")

    parser.add_argument("--check", dest="check", action="store_true",
                        help="Check the configuration file.")

    parser.add_argument("-p", "--profile", action="append", dest="profiles", default=[],
                        help="Profile to run. Can be specified multiple times to run multiple profiles. \
                            If not provided, all profiles will be run")

    parser.add_argument("-e", "--global-pre-exec",
                        help="Command to be executed before the profile is run")
    parser.add_argument("-o", "--global-post-exec",
                        help="Command to be executed after the profile is run")

    args = parser.parse_args()

    #
    # Logging
    setup_logging(args.log_file, args.verbosity)

    #
    # Configuration
    if not os.path.exists(args.config_file):
        logging.error(
            "Configuration file not found! Default location: '%s', override using --config-file." % args.config_file)
        sys.exit(_EXIT_NO_CONFIG)

    config = configparser.ConfigParser()
    config.read(args.config_file)
    sane_config = True
    for key in config.sections():
        try:
            config_entries.append(Entry(key, config[key]))
        except Exception as err:
            logging.error(err)
            sane_config = False

    if not sane_config:
        logging.error("Invalid configuration file!")
        sys.exit(_EXIT_INVALID_CONFIG)

    if args.check:
        print("Configuration file is OK!")
        sys.exit(_EXIT_OK)

    if args.show:
        print("Profiles:\n=========")
        max_name = max([len(entry.name) for entry in config_entries])
        max_source = max([len(entry.source if entry.source else "") for entry in config_entries])
        max_source_path = max([len(entry.source_path) for entry in config_entries])
        max_destination = max([len(entry.destination if entry.destination else "") for entry in config_entries])
        max_destination_path = max([len(entry.destination_path) for entry in config_entries])

        for entry in config_entries:
            name = entry.name.ljust(max_name)
            source = (entry.source if entry.source else "").rjust(max_source)
            source_path = entry.source_path.ljust(max_source_path)
            destination = (entry.destination if entry.destination else "").rjust(max_destination)
            destination_path = entry.destination_path.ljust(max_destination_path)
            print("     %s - %s:%s => %s:%s" %
                  (name, source, source_path, destination, destination_path))

        sys.exit(_EXIT_OK)

    #
    # Check Rclone version
    exit_code, stdout, _ = run_command([RCLONE_EXECUTABLE, RCLONE_ARG_VERSION])
    if exit_code != 0:
        logging.error("Could not determine Rclone version!")
        sys.exit(_EXIT_MISSING_RCLONE)
    line = stdout.split('\n', 1)[0]
    if not ("rclone v" in line and line.replace("rclone v", "") >= RCLONE_MIN_VERSION):
        logging.error("Rclone minimum version is %s" % RCLONE_MIN_VERSION)
        sys.exit(_EXIT_MIN_VERSION)

    #
    # Execute Global Pre-Exec command
    if args.global_pre_exec:
        exit_code, _, _ = run_command(args.global_pre_exec)
        if exit_code != 0:
            logging.error(
                "global_pre_exec returned %s. Will not run the profiles." % exit_code)
            sys.exit(_EXIT_FINISHED_WITH_ERRORS)

    #
    # Execute Profiles
    exit_code = run(args.profiles)
    if exit_code == 0:
        logging.info("backup-rclone finished!")
    else:
        logging.warning("backup-rclone finished with errors!")

    #
    # Execute Global Post-Exec command
    if args.global_post_exec:
        exit_code, _, _ = run_command(args.global_post_exec)
        if exit_code != 0:
            logging.error("global_post_exec returned %s." % exit_code)
            sys.exit(_EXIT_FINISHED_WITH_ERRORS)

    sys.exit(exit_code)


if __name__ == "__main__":
    main()
